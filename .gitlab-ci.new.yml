stages:
  - build
  - deploy

variables:
    APT_CACHE_DIR: $CI_PROJECT_DIR/apt
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    IMAGE_TAG_LATEST: $CI_REGISTRY_IMAGE:latest
    IMAGE_TAG_STAGING: $CI_REGISTRY_IMAGE:staging
    IMAGE_TAG_PRODUCTION: $CI_REGISTRY_IMAGE:production
    DOCKER_DRIVER: overlay2

before_script:
    - 'which ssh-agent || ( apt update -y && apt install openssh-client -y )'
    - 'which rsync || ( apt update -y && apt install -y rsync )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

build-docker:
    tags:
        - dind
    stage: build
    image: docker:19.03.1
    services:
        - docker:19.03.1-dind
    artifacts:
        paths:
            - image
    before_script: []
    script:
        - docker version
        - docker build --cache-from $IMAGE_TAG_LATEST -t $CI_REGISTRY_IMAGE .
        - docker save $IMAGE_TAG_LATEST -o image

deploy:prod:
    stage: deploy
    tags:
        - docker
    dependencies:
        - build-docker
    script:
        - ssh deploy@cloud.technokrat.ch docker tag $IMAGE_TAG_STAGING $IMAGE_TAG_PRODUCTION
        - ssh deploy@cloud.technokrat.ch 'bash -s' < scripts/restart_production.sh
    environment:
        name: production
        url: https://new.jjjcaarau.ch
    when: manual
    only:
        - staging

cache:
    paths:
        - apt/
        - target/
